rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Basic helpers
    function signedIn() {
      return request.auth != null;
    }

    // Check whether the user document exists in /users/{uid}
    function userExists() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Return user's document data (only call when userExists() is true)
    function userData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Admin/HOD check (super-privileged)
    function isAdminOrHod() {
      return signedIn() && userExists() && (userData().role == 'HOD' || userData().role == 'ADMIN');
    }

    // Generic permission check: checks `users/{uid}.permissions` array or admin/hod
    function hasPermission(permission) {
      return signedIn() && (
        isAdminOrHod()
        || (userExists() && userData().permissions is list && permission in userData().permissions)
      );
    }

    // Helper: check whether the current authenticated user is allowed to access a specific student doc
    // docData should be a student document (resource.data or request.resource.data)
    function allowedForStudent(docData) {
      let expectedClass = {
        "semester": docData.semester,
        "division": docData.division,
        "department": docData.department
      };

      let expectedClassAlt = {
        "semester": docData.semester,
        "division": docData.division,
        "department": docData.branch
      };

      return signedIn()
        && userExists()
        && userData().allowed_classes is list
        && userData().allowed_classes.size() > 0
        && (expectedClass in userData().allowed_classes || expectedClassAlt in userData().allowed_classes);
    }

    // Students collection: restrict direct deletes; writes by permission only.
    match /students/{studentId} {
      allow get, list: if signedIn() && (
        isAdminOrHod()
        || (userExists() && (userData().role == 'CC' || userData().role == 'CR') && allowedForStudent(resource.data))
      );

      allow create, update, delete: if signedIn() && (
        isAdminOrHod()
        || (userExists() && (userData().role == 'CC' || userData().role == 'CR') && allowedForStudent(request.resource.data))
      );
    }

    // Users collection: users can read their own doc; only managers can manage other user docs.
    match /users/{userId} {
      allow read: if signedIn() && (request.auth.uid == userId || hasPermission('manage_users'));

      allow create: if signedIn() && (
        hasPermission('manage_users')
        || (
          request.auth.uid == userId
          && !(request.resource.data.keys().hasAny(['permissions', 'allowed_classes', 'is_active']))
          && (!request.resource.data.keys().hasAny(['role']) || request.resource.data.role == 'STUDENT')
          && (!request.resource.data.keys().hasAny(['uid']) || request.resource.data.uid == userId)
        )
      );

      allow update: if signedIn() && (
        hasPermission('manage_users')
        || (
          request.auth.uid == userId
          && !(request.resource.data.keys().hasAny(['permissions', 'allowed_classes', 'is_active', 'role']))
          && (!request.resource.data.keys().hasAny(['uid']) || request.resource.data.uid == userId)
        )
        || (
          userExists() && userData().role == 'ADMIN' && request.resource.data.keys().hasAny(['assignedClasses'])
        )
      );

      allow delete: if false;
    }

    // Attendance records: controlled reads/writes
    match /attendance/{attendanceId} {
      allow read: if signedIn() && (hasPermission('view_attendance') || isAdminOrHod());
      allow create: if signedIn() && hasPermission('mark_attendance');
      allow update: if signedIn() && hasPermission('update_attendance');
      allow delete: if false;
    }

    // Invites: creation allowed only to users with invite permission (server functions preferred)
    match /invites/{inviteId} {
      allow create: if signedIn() && hasPermission('create_invite');
      allow read: if signedIn() && (isAdminOrHod() || (resource.data.createdBy == request.auth.uid));
      allow update: if false;
      allow delete: if false;
    }

    // Email outbox should only be written/read by server code (functions/admin)
    match /email_outbox/{docId} {
      allow read: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Audit logs should only be written/read by server-side code
    match /audit_logs/{doc} {
      allow read: if false;
      allow write: if request.auth != null && isAdminOrHod();
    }

    // Classes or Divisions collection: controlled reads
    match /classes/{classId} {
      allow read: if signedIn();
      allow create, update, delete: if false;
    }

    // Alias for Divisions pointing to Classes
    match /divisions/{divisionId} {
      allow read: if signedIn();
      allow create, update, delete: if false;
    }

    // Default: deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
